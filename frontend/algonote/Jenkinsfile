pipeline{
    environment{
        repository = "tollea1234/algonote-frontend"
        DOCKERHUB_CREDENTIALS = credentials('docker') // jenkins에 등록해 놓은 docker hub credentials 이름
        dockerImage = '' 
    }

    agent any

    stages{
        stage('Build docker image'){
            steps{
                dir('frontend/algonote'){
                    script{
                        dockerImage = docker.build repository
                    }
                }
            }
        }
        
        stage('Login'){
          steps{
              sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin' // docker hub 로그인
          }
        }
        
        stage('Deploy our image') { 
            steps { 
                script {
                    sh 'docker push $repository' //docker push
                } 
            }
        } 
        stage('Cleaning up') { 
            steps { 
                sh "docker rmi $repository"// docker image 제거
            }
        } 

        stage('Deploy on Deploy Server'){
            steps{
                sh '''
                    ssh -i ~/.ssh/id_rsa ubuntu@k10b203.p.ssafy.io "docker pull tollea1234/algonote-frontend"
                    ssh -i ~/.ssh/id_rsa ubuntu@k10b203.p.ssafy.io "docker rm frontend-container --force"
                    ssh -i ~/.ssh/id_rsa ubuntu@k10b203.p.ssafy.io "docker run -p 3000:3000 -d --name frontend-container tollea1234/algonote-frontend"
                    ssh -i ~/.ssh/id_rsa ubuntu@k10b203.p.ssafy.io "docker image prune"
                '''
            }
        }
    }

        post{
        success {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good', 
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/44qww6fd4bbg3yjh4n67a4a3ce', 
                channel: 'Jenkins'
                )
            }
        }
        failure {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger', 
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/44qww6fd4bbg3yjh4n67a4a3ce', 
                channel: 'Jenkins'
                )
            }
        }
    }
}
